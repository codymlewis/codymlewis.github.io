class NeuralNetwork {
    constructor(layer_sizes) {
        this.layer_sizes = layer_sizes;
        this.weights = [];
        for (var layer = 0; layer < this.layer_sizes.length - 1; layer++) {
            this.weights.push([]);
            for (var node_from = 0; node_from < this.layer_sizes[layer]; node_from++) {
                this.weights[layer].push([]);
                for (var node_to = 0; node_to < this.layer_sizes[layer + 1]; node_to++) {
                    this.weights[layer][node_from].push(2 * Math.random() - 1);
                }
            }
        }
    }

    sigmoid(x) {
        return Math.tanh(x);
    }

    forward(x, output_type, output_layer) {
        var edge_out = null;
        var next_x = x;
        for (var layer = 0; layer <= output_layer; layer++) {
            x = next_x;
            if (layer < this.weights.length) {
                edge_out = [];
                for (var node_from = 0; node_from < x.length; node_from++) {
                    edge_out.push([])
                    for (var node_to = 0; node_to < this.weights[layer][node_from].length; node_to++) {
                        edge_out[node_from].push(x[node_from] * this.weights[layer][node_from][node_to])
                    }

                }
            }

            next_x = [];
            for (var node_to = 0; node_to < edge_out[0].length; node_to++) {
                var activation_sum = 0.0;
                for (var node_from = 0; node_from < edge_out.length; node_from++) {
                    activation_sum += edge_out[node_from][node_to];
                }
                next_x.push(this.sigmoid(activation_sum));
            }

        }

        if (output_type === "node") {
            return x;
        } else {
            return edge_out;
        }
    }
}

class NNGraph {
    constructor(canvas, nn) {
        this.default_colour = this.floatToColourString(0.0);
        const padded_canvas_height = canvas.height * 0.8;
        const max_layer_size = Math.max(...nn.layer_sizes);
        const node_h_gap = Math.round((padded_canvas_height * 0.9) / max_layer_size);
        this.node_radius = Math.round(node_h_gap * 0.75 / 2);
        const w_pad = canvas.width * 0.01;
        const node_w_gap = Math.round((canvas.width - (2 * this.node_radius + 2 * w_pad)) / (nn.layer_sizes.length - 1));
        const start_w = this.node_radius + w_pad;

        this.nodes = [];
        for (var i = 0; i < nn.layer_sizes.length; i++) {
            var start_h = Math.round((canvas.height / 2) - ((nn.layer_sizes[i] / 2) * node_h_gap));
            this.nodes.push([]);
            for (var j = 0; j < nn.layer_sizes[i]; j++) {
                this.nodes[i].push({
                    x: start_w + i * node_w_gap,
                    y: start_h + j * node_h_gap,
                });
            }
        }
    }

    floatToColourString(value) {
        const max_val = 0xffffff;
        const mid_val = 0xcccccc;
        const colour_val = Math.max(0, Math.round(value * (max_val - mid_val) + mid_val));
        var colour_code = colour_val.toString(16);
        colour_code = "#" + colour_code.padStart(6 - colour_code.length);
        return colour_code;
    }


    draw(ctx, colour_type, colour_layer, colour_data) {
        for (var current_layer = 0; current_layer < this.nodes.length - 1; current_layer++) {
            for (var cl_node = 0; cl_node < this.nodes[current_layer].length; cl_node++) {
                for (var nl_node = 0; nl_node < this.nodes[current_layer + 1].length; nl_node ++) {
                    ctx.beginPath();
                    var current_layer_node = this.nodes[current_layer][cl_node];
                    ctx.moveTo(current_layer_node.x, current_layer_node.y);
                    var next_layer_node = this.nodes[current_layer + 1][nl_node];
                    ctx.lineTo(next_layer_node.x, next_layer_node.y);
                    if (colour_data != null && colour_type === "edge" && colour_layer === current_layer) {
                        ctx.strokeStyle = this.floatToColourString(colour_data[cl_node][nl_node]);
                    } else {
                        ctx.strokeStyle = this.default_colour;
                    }
                    ctx.lineWidth = 3;
                    ctx.stroke();
                }
            }
        }

        for (var i = 0; i < this.nodes.length; i++) {
            for (var j = 0; j < this.nodes[i].length; j++) {
                ctx.beginPath();
                ctx.arc(this.nodes[i][j].x, this.nodes[i][j].y, this.node_radius, 0, 2 * Math.PI);
                if (colour_data != null && colour_type === "node" && colour_layer === i) {
                    ctx.fillStyle = this.floatToColourString(colour_data[j]);
                } else {
                    ctx.fillStyle = this.default_colour;
                }
                ctx.fill()
            }
        }
    };
}

let NNAnimation = {
    // Min-max normalised iris dataset without labels, from https://archive.ics.uci.edu/dataset/53/iris
    dataset: [
        [0.222222222222222, 0.625, 0.0677966101694915, 0.0416666666666667],
        [0.166666666666667, 0.416666666666667, 0.0677966101694915, 0.0416666666666667],
        [0.111111111111111, 0.5, 0.0508474576271187, 0.0416666666666667],
        [0.0833333333333333, 0.458333333333333, 0.0847457627118644, 0.0416666666666667],
        [0.194444444444444, 0.666666666666667, 0.0677966101694915, 0.0416666666666667],
        [0.305555555555556, 0.791666666666667, 0.11864406779661, 0.125],
        [0.0833333333333333, 0.583333333333333, 0.0677966101694915, 0.0833333333333333],
        [0.194444444444444, 0.583333333333333, 0.0847457627118644, 0.0416666666666667],
        [0.0277777777777779, 0.375, 0.0677966101694915, 0.0416666666666667],
        [0.166666666666667, 0.458333333333333, 0.0847457627118644, 0],
        [0.305555555555556, 0.708333333333333, 0.0847457627118644, 0.0416666666666667],
        [0.138888888888889, 0.583333333333333, 0.101694915254237, 0.0416666666666667],
        [0.138888888888889, 0.416666666666667, 0.0677966101694915, 0],
        [0, 0.416666666666667, 0.0169491525423729, 0],
        [0.416666666666667, 0.833333333333333, 0.0338983050847458, 0.0416666666666667],
        [0.388888888888889, 1, 0.0847457627118644, 0.125],
        [0.305555555555556, 0.791666666666667, 0.0508474576271187, 0.125],
        [0.222222222222222, 0.625, 0.0677966101694915, 0.0833333333333333],
        [0.388888888888889, 0.75, 0.11864406779661, 0.0833333333333333],
        [0.222222222222222, 0.75, 0.0847457627118644, 0.0833333333333333],
        [0.305555555555556, 0.583333333333333, 0.11864406779661, 0.0416666666666667],
        [0.222222222222222, 0.708333333333333, 0.0847457627118644, 0.125],
        [0.0833333333333333, 0.666666666666667, 0, 0.0416666666666667],
        [0.222222222222222, 0.541666666666667, 0.11864406779661, 0.166666666666667],
        [0.138888888888889, 0.583333333333333, 0.152542372881356, 0.0416666666666667],
        [0.194444444444444, 0.416666666666667, 0.101694915254237, 0.0416666666666667],
        [0.194444444444444, 0.583333333333333, 0.101694915254237, 0.125],
        [0.25, 0.625, 0.0847457627118644, 0.0416666666666667],
        [0.25, 0.583333333333333, 0.0677966101694915, 0.0416666666666667],
        [0.111111111111111, 0.5, 0.101694915254237, 0.0416666666666667],
        [0.138888888888889, 0.458333333333333, 0.101694915254237, 0.0416666666666667],
        [0.305555555555556, 0.583333333333333, 0.0847457627118644, 0.125],
        [0.25, 0.875, 0.0847457627118644, 0],
        [0.333333333333333, 0.916666666666667, 0.0677966101694915, 0.0416666666666667],
        [0.166666666666667, 0.458333333333333, 0.0847457627118644, 0],
        [0.194444444444444, 0.5, 0.0338983050847458, 0.0416666666666667],
        [0.333333333333333, 0.625, 0.0508474576271187, 0.0416666666666667],
        [0.166666666666667, 0.458333333333333, 0.0847457627118644, 0],
        [0.0277777777777779, 0.416666666666667, 0.0508474576271187, 0.0416666666666667],
        [0.222222222222222, 0.583333333333333, 0.0847457627118644, 0.0416666666666667],
        [0.194444444444444, 0.625, 0.0508474576271187, 0.0833333333333333],
        [0.0555555555555556, 0.125, 0.0508474576271187, 0.0833333333333333],
        [0.0277777777777779, 0.5, 0.0508474576271187, 0.0416666666666667],
        [0.194444444444444, 0.625, 0.101694915254237, 0.208333333333333],
        [0.222222222222222, 0.75, 0.152542372881356, 0.125],
        [0.138888888888889, 0.416666666666667, 0.0677966101694915, 0.0833333333333333],
        [0.222222222222222, 0.75, 0.101694915254237, 0.0416666666666667],
        [0.0833333333333333, 0.5, 0.0677966101694915, 0.0416666666666667],
        [0.277777777777778, 0.708333333333333, 0.0847457627118644, 0.0416666666666667],
        [0.194444444444444, 0.541666666666667, 0.0677966101694915, 0.0416666666666667],
        [0.75, 0.5, 0.627118644067797, 0.541666666666667],
        [0.583333333333333, 0.5, 0.593220338983051, 0.583333333333333],
        [0.722222222222222, 0.458333333333333, 0.661016949152542, 0.583333333333333],
        [0.333333333333333, 0.125, 0.508474576271186, 0.5],
        [0.611111111111111, 0.333333333333333, 0.610169491525424, 0.583333333333333],
        [0.388888888888889, 0.333333333333333, 0.593220338983051, 0.5],
        [0.555555555555556, 0.541666666666667, 0.627118644067797, 0.625],
        [0.166666666666667, 0.166666666666667, 0.389830508474576, 0.375],
        [0.638888888888889, 0.375, 0.610169491525424, 0.5],
        [0.25, 0.291666666666667, 0.491525423728814, 0.541666666666667],
        [0.194444444444444, 0, 0.423728813559322, 0.375],
        [0.444444444444445, 0.416666666666667, 0.542372881355932, 0.583333333333333],
        [0.472222222222222, 0.0833333333333334, 0.508474576271186, 0.375],
        [0.5, 0.375, 0.627118644067797, 0.541666666666667],
        [0.361111111111111, 0.375, 0.440677966101695, 0.5],
        [0.666666666666667, 0.458333333333333, 0.576271186440678, 0.541666666666667],
        [0.361111111111111, 0.416666666666667, 0.593220338983051, 0.583333333333333],
        [0.416666666666667, 0.291666666666667, 0.525423728813559, 0.375],
        [0.527777777777778, 0.0833333333333334, 0.593220338983051, 0.583333333333333],
        [0.361111111111111, 0.208333333333333, 0.491525423728814, 0.416666666666667],
        [0.444444444444445, 0.5, 0.644067796610169, 0.708333333333333],
        [0.5, 0.333333333333333, 0.508474576271186, 0.5],
        [0.555555555555556, 0.208333333333333, 0.661016949152542, 0.583333333333333],
        [0.5, 0.333333333333333, 0.627118644067797, 0.458333333333333],
        [0.583333333333333, 0.375, 0.559322033898305, 0.5],
        [0.638888888888889, 0.416666666666667, 0.576271186440678, 0.541666666666667],
        [0.694444444444444, 0.333333333333333, 0.644067796610169, 0.541666666666667],
        [0.666666666666667, 0.416666666666667, 0.677966101694915, 0.666666666666667],
        [0.472222222222222, 0.375, 0.593220338983051, 0.583333333333333],
        [0.388888888888889, 0.25, 0.423728813559322, 0.375],
        [0.333333333333333, 0.166666666666667, 0.474576271186441, 0.416666666666667],
        [0.333333333333333, 0.166666666666667, 0.457627118644068, 0.375],
        [0.416666666666667, 0.291666666666667, 0.491525423728814, 0.458333333333333],
        [0.472222222222222, 0.291666666666667, 0.694915254237288, 0.625],
        [0.305555555555556, 0.416666666666667, 0.593220338983051, 0.583333333333333],
        [0.472222222222222, 0.583333333333333, 0.593220338983051, 0.625],
        [0.666666666666667, 0.458333333333333, 0.627118644067797, 0.583333333333333],
        [0.555555555555556, 0.125, 0.576271186440678, 0.5],
        [0.361111111111111, 0.416666666666667, 0.525423728813559, 0.5],
        [0.333333333333333, 0.208333333333333, 0.508474576271186, 0.5],
        [0.333333333333333, 0.25, 0.576271186440678, 0.458333333333333],
        [0.5, 0.416666666666667, 0.610169491525424, 0.541666666666667],
        [0.416666666666667, 0.25, 0.508474576271186, 0.458333333333333],
        [0.194444444444444, 0.125, 0.389830508474576, 0.375],
        [0.361111111111111, 0.291666666666667, 0.542372881355932, 0.5],
        [0.388888888888889, 0.416666666666667, 0.542372881355932, 0.458333333333333],
        [0.388888888888889, 0.375, 0.542372881355932, 0.5],
        [0.527777777777778, 0.375, 0.559322033898305, 0.5],
        [0.222222222222222, 0.208333333333333, 0.338983050847458, 0.416666666666667],
        [0.388888888888889, 0.333333333333333, 0.525423728813559, 0.5],
        [0.555555555555556, 0.541666666666667, 0.847457627118644, 1],
        [0.416666666666667, 0.291666666666667, 0.694915254237288, 0.75],
        [0.777777777777778, 0.416666666666667, 0.830508474576271, 0.833333333333333],
        [0.555555555555556, 0.375, 0.779661016949153, 0.708333333333333],
        [0.611111111111111, 0.416666666666667, 0.813559322033898, 0.875],
        [0.916666666666667, 0.416666666666667, 0.949152542372881, 0.833333333333333],
        [0.166666666666667, 0.208333333333333, 0.593220338983051, 0.666666666666667],
        [0.833333333333333, 0.375, 0.898305084745763, 0.708333333333333],
        [0.666666666666667, 0.208333333333333, 0.813559322033898, 0.708333333333333],
        [0.805555555555556, 0.666666666666667, 0.864406779661017, 1],
        [0.611111111111111, 0.5, 0.694915254237288, 0.791666666666667],
        [0.583333333333333, 0.291666666666667, 0.728813559322034, 0.75],
        [0.694444444444444, 0.416666666666667, 0.76271186440678, 0.833333333333333],
        [0.388888888888889, 0.208333333333333, 0.677966101694915, 0.791666666666667],
        [0.416666666666667, 0.333333333333333, 0.694915254237288, 0.958333333333333],
        [0.583333333333333, 0.5, 0.728813559322034, 0.916666666666667],
        [0.611111111111111, 0.416666666666667, 0.76271186440678, 0.708333333333333],
        [0.944444444444444, 0.75, 0.966101694915254, 0.875],
        [0.944444444444444, 0.25, 1, 0.916666666666667],
        [0.472222222222222, 0.0833333333333334, 0.677966101694915, 0.583333333333333],
        [0.722222222222222, 0.5, 0.796610169491525, 0.916666666666667],
        [0.361111111111111, 0.333333333333333, 0.661016949152542, 0.791666666666667],
        [0.944444444444444, 0.333333333333333, 0.966101694915254, 0.791666666666667],
        [0.555555555555556, 0.291666666666667, 0.661016949152542, 0.708333333333333],
        [0.666666666666667, 0.541666666666667, 0.796610169491525, 0.833333333333333],
        [0.805555555555556, 0.5, 0.847457627118644, 0.708333333333333],
        [0.527777777777778, 0.333333333333333, 0.644067796610169, 0.708333333333333],
        [0.5, 0.416666666666667, 0.661016949152542, 0.708333333333333],
        [0.583333333333333, 0.333333333333333, 0.779661016949153, 0.833333333333333],
        [0.805555555555556, 0.416666666666667, 0.813559322033898, 0.625],
        [0.861111111111111, 0.333333333333333, 0.864406779661017, 0.75],
        [1, 0.75, 0.915254237288136, 0.791666666666667],
        [0.583333333333333, 0.333333333333333, 0.779661016949153, 0.875],
        [0.555555555555556, 0.333333333333333, 0.694915254237288, 0.583333333333333],
        [0.5, 0.25, 0.779661016949153, 0.541666666666667],
        [0.944444444444444, 0.416666666666667, 0.864406779661017, 0.916666666666667],
        [0.555555555555556, 0.583333333333333, 0.779661016949153, 0.958333333333333],
        [0.583333333333333, 0.458333333333333, 0.76271186440678, 0.708333333333333],
        [0.472222222222222, 0.416666666666667, 0.644067796610169, 0.708333333333333],
        [0.722222222222222, 0.458333333333333, 0.745762711864407, 0.833333333333333],
        [0.666666666666667, 0.458333333333333, 0.779661016949153, 0.958333333333333],
        [0.722222222222222, 0.458333333333333, 0.694915254237288, 0.916666666666667],
        [0.416666666666667, 0.291666666666667, 0.694915254237288, 0.75],
        [0.694444444444444, 0.5, 0.830508474576271, 0.916666666666667],
        [0.666666666666667, 0.541666666666667, 0.796610169491525, 1],
        [0.666666666666667, 0.416666666666667, 0.711864406779661, 0.916666666666667],
        [0.555555555555556, 0.208333333333333, 0.677966101694915, 0.75],
        [0.611111111111111, 0.416666666666667, 0.711864406779661, 0.791666666666667],
        [0.527777777777778, 0.583333333333333, 0.745762711864407, 0.916666666666667],
        [0.444444444444445, 0.416666666666667, 0.694915254237288, 0.708333333333333],
    ],

    animate: function() {
        const canvas = document.getElementById("neural-network");
        const ctx = canvas.getContext("2d");
        const dpr = window.devicePixelRatio;
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width * dpr;
        canvas.height = rect.height * dpr;
        canvas.style.width = `${rect.width}px`;
        canvas.style.height = `${rect.height}px`;

        let nn = new NeuralNetwork([4, 6, 5, 3]);
        let graph = new NNGraph(canvas, nn);

        graph.draw(ctx);
        const total_iterations = this.dataset.length * (2 * nn.layer_sizes.length - 1);
        var i = 0;
        var current_layer = 0;
        var act_type = "edge";

        setInterval(
            () => {
                if (act_type === "edge") {
                    act_type = "node";
                } else {
                    act_type = "edge";
                }
                var current_sample = this.dataset[i % (2 * nn.layer_sizes.length - 1)];
                graph.draw(ctx, act_type, current_layer, nn.forward(current_sample, act_type, current_layer));
                i = (i + 1) % total_iterations;
                if (current_layer === nn.layer_sizes.length - 1) {
                    act_type = "edge";
                    current_layer = 0;
                } else if (act_type === "edge") {
                    current_layer += 1;
                }
            },
            150
        );
    }

}

NNAnimation.animate();
